"""
https://leetcode.com/problems/remove-palindromic-subsequences/

You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.



Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".


Constraints:

1 <= s.length <= 1000
s[i] is either 'a' or 'b'.


"""

"""
So the idea is to since all characters are either "a" or "b".  So if we dont have a palindrome, thw worst case scenatio

we need steps. Step 1: Delete all a  Stpe 2: Delete all b

"""


class Solution:
    def removePalindromeSub(self, s: str) -> int:

        if len(s) == 0:
            return 0

        if self.helper_isPalindrome(s):
            return 1

        return 2

    def helper_isPalindrome(self, s: str) -> bool:

        if s == '' or len(s) == 1:
            return True

        low = 0;
        high = len(s) - 1

        while low <= high:
            if s[low] != s[high]:
                return False
            low += 1
            high -= 1
        return True
